#summary Compacting logging at the same time extending with traceability.

=Traceability Transformation=


|| [https://googledrive.com/host/0B8DIOtn2sWX8NVlDdEpHTHpDWk0/1/source/trt_v1_source.7z src] || [https://googledrive.com/host/0B8DIOtn2sWX8NVlDdEpHTHpDWk0/1/docs/index.html doc] || [https://googledrive.com/host/0B8DIOtn2sWX8NVlDdEpHTHpDWk0/1/binaries/trt_v1_binary.7z binaries] ||

TrT is a transformation tool for Java that will change a Java program with ordinary logging so that it produces very compact encoded log files. Despite the compaction, the transformation also enrich the logged information with tracing information, so that when decoded the resulting log will also reveal decisions (branches) taken by the program that were important towards reaching or avoiding its log points.

The produced decoded file is a binary string, e.g:

{{{
10101010101011101010011
}}}

When decoded, the above could expand to the example below. It adds tracing information for free. This allows for example a static replay of the execution, or could be useful for debugging.

{{{
(Reversi.java:232)@start mouseClicked
(Reversi.java:236)@Set temporary values for storing the square that was clicked
(Reversi.java:238)COND (Reversi.java:239)T (Reversi.java:240)@Handling left-mouse clicks
(Reversi.java:241)COND (Reversi.java:245)F (Reversi.java:246)COND (Reversi.java:247)T (Reversi.java:247)@Clicking in the game-field
(Reversi.java:250)@The square that was clicked was determined, x =  <4>
(Reversi.java:251)@y =  <2>
(Reversi.java:495)@start move
(Reversi.java:498)COND (Reversi.java:502)F (Reversi.java:504)@Else: x,y is a possible move.
(Reversi.java:507)@The position of the move gets the color; isRED:  <true>
(Reversi.java:513)@Loop through the 8 directions
(Reversi.java:514)COND (Reversi.java:515)T (Reversi.java:516)@Check whether any stones need converting
(Reversi.java:517)COND (Reversi.java:527)F (Reversi.java:514)COND (Reversi.java:515)T (Reversi.java:516)@Check whether any stones need converting
(Reversi.java:517)COND (Reversi.java:527)F (Reversi.java:514)COND (Reversi.java:515)T (Reversi.java:516)@Check whether any stones need converting
(Reversi.java:517)COND (Reversi.java:527)F (Reversi.java:514)COND (Reversi.java:515)T (Reversi.java:516)@Check whether any stones need converting
(Reversi.java:517)COND (Reversi.java:527)F (Reversi.java:514)COND (Reversi.java:515)T (Reversi.java:516)@Check whether any stones need converting
(Reversi.java:517)COND (Reversi.java:518)T (Reversi.java:521)@Calculating the direction in dx/dy; dx =  <-1>
(Reversi.java:522)@dy =  <0>
(Reversi.java:514)COND (Reversi.java:515)T (Reversi.java:516)@Check whether any stones need converting
(Reversi.java:517)COND (Reversi.java:527)F (Reversi.java:514)COND (Reversi.java:515)T (Reversi.java:516)@Check whether any stones need converting
(Reversi.java:517)COND (Reversi.java:527)F (Reversi.java:514)COND (Reversi.java:515)T (Reversi.java:516)@Check whether any stones need converting
(Reversi.java:517)COND (Reversi.java:527)F (Reversi.java:514)COND (Reversi.java:528)F (Reversi.java:356)COND (Reversi.java:356)T (Reversi.java:357)COND (Reversi.java:357)T (Reversi.java:530)@normal end of move
(Reversi.java:257)@end mouseClicked
}}}

For how it works, check out our paper:

   _[http://www.thinkmind.org/download.php?articleid=valid_2013_3_40_40066 Compact Traceable Logging]_, Wishnu Prasetya, Ales Sturala, Arie Middelkoop, Jurriaan Hage, Alexander Elyasov, in The 5th International Conference on Advances in System Testing and Validation Lifecycle (VALID), 2013.