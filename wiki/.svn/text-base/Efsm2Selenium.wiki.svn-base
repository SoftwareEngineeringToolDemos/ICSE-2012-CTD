#summary A tool for generating test cases from an Extended Finite State Machine

= EFSM2Selenium =

|| [http://code.google.com/p/fittest/source/browse/#svn%2Ftrunk%2FITE%20Components%20standalone%2FModel%20%20Inference%20and%20Transformer%20tools%2FEFSM-based%2FEFSM2Selenium src] || [https://drive.google.com/folderview?id=0B7MhSggBoW95ZjhKNVVPaUJFTmM&usp=sharing doc] || [https://drive.google.com/folderview?id=0B7MhSggBoW95ZjhKNVVPaUJFTmM&usp=sharing download] ||

== Introduction ==

EFSM2Selenium generates test cases from the formal description of a SUT in terms of Extended Finite State Machine.

= EFSM specification =

A EFSM specification defines an extended state machine and it is defined by 4 sections: mutators, inspectors, states and transitions.
Here is an example of a specification for a simple online shopping cart.

{{{

fsm cart.Cart {


    mutators {
        a := add(int);
        r := rem(int);
        p := pay();
    }

    inspectors {
        int n:=n();
    }

    states {
        n0 [initial] { n == 0; } ;
        n1 { n == 1; } ;
        n2 { n > 1; } ;
        n3 { n == -1; } ;
    }
    
    transitions {
        n0 -> n1 { a; } ;
        n0 -> n2 { a; } ;

        n1 -> n0 { r; } ;
        n1 -> n2 { a; } ;
        n1 -> n3 { p; } ;

        n2 -> n2 { a; } ;
        n2 -> n2 { r; } ;
        n2 -> n3 { p; } ;
        n2 -> n1 { r; } ;
        n2 -> n0 { r; } ;
    }

}

}}}

 * mutator section lists the set of events that causes the system to change state, in the example, _add(int)_ 
 * inspector section lists the set of functions used to request the current state to the SUT
 * states section describes SUT states by using logical expression on the set of expressions